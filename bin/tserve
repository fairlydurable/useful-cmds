#!/bin/bash

# Script Name: tserve
# Author: Erica Sadun
# Date: 12 February 2024
# Temporal server utility.

# Globals
script_name=$(basename "$0")
default_port=8233
not_running="Temporal server is not currently running"
port=$default_port

# Usage
function usage_message() {
    echo "Usage: $script_name [--port PORT] command"
    echo "Commands:"
    echo "  start     Start temporal server"
    echo "  stop      Stop temporal server"
    echo "  check     Check if temporal server is running"
    echo "  open      Open web UI of temporal server"
}

# Check if temporal is already running
function check_process() {
    pgrep temporal >/dev/null; return $?
}

# Fetch the current port number
fetch_port() {
    port=$(ps -eo args | grep "temporal.*--ui-port" | sed -n 's/.*--ui-port \([0-9]\{1,\}\).*/\1/p')
}

# Fetch port as string
function port_string() {
    fetch_port
    if [ -n "$port" ]; then echo "port $port";
    else echo "an unknown port (default: $default_port)"; fi
}

# Start server/cluster in background
start_temporal() {
  temporal_path=$(command -v temporal)  
  if [[ -z "$temporal_path" ]]; then
    echo "Temporal is not installed. Unable to start Temporal server."; return; fi
  commands="server start-dev --ui-port $port"
  "$temporal_path" $commands >/dev/null 2>&1 &
  echo "Server started on port $port"
}

# Open browser (requires Python)
open_browser() {
  python_command=$(command -v python3 || command -v python)
  if [[ -z "$python_command" ]]; then
    echo "Python is not installed. Unable to open the web browser."; return; fi
  echo "Opening web page with Python using default browser"
  "$python_command" -m webbrowser "http://localhost:$port/" > /dev/null
}

# Parse flags
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --port) port="$2"; shift ;;
        *) break ;;
    esac
    shift
done

# Process commands
if [[ "$#" -eq 0 ]]; then usage_message; exit 0; fi
if [[ "$#" -gt 1 ]]; then echo "Error: Only one command expected"; usage_message; exit 1; fi

case "$1" in
    start)
        if check_process; then fetch_port
            echo "Temporal is already running on port $port"; exit 1; fi
        start_temporal ;; 
    stop)
        if check_process; then 
            pkill temporal; echo "Ended temporal process."; exit 0; fi
        echo "Error: $not_running"; exit 1 ;; 
    check | info | port)
        if check_process; then echo "Temporal server is running on $(port_string)."
        else echo $not_running; fi ;;
    open | web | browse)
        if check_process; then
            uiport=$(fetch_port)
            if [ -z "$ui_port" ]; then ui_port=$default_port; fi
            open_browser "localhost:$ui_port"
            exit 0
        else echo $not_running; fi ;;
    *)
        echo "Error: Unknown command $1"; usage_message; exit 1 ;;
esac

exit 0
